# (수정) Upstage API는 openai 라이브러리를 사용합니다.
from openai import OpenAI
from dotenv import load_dotenv
import os
import pymupdf

# .env 파일에서 환경 변수를 불러옵니다.
load_dotenv()

# (수정) .env 파일에서 UPSTAGE_API_KEY를 불러옵니다.
# Upstage에서는 보통 'SOLAR_API_KEY'라는 이름도 사용하지만, 명확성을 위해 'UPSTAGE_API_KEY'로 변경했습니다.
# .env 파일에 UPSTAGE_API_KEY="여러분의 API 키" 형식으로 저장해주세요.
api_key = os.getenv("Solar_api_key")
if not api_key:
    raise ValueError("USolar_api_key가 .env 파일에 설정되지 않았습니다.")

# 이 함수는 API와 무관하므로 수정할 필요가 없습니다.
def pdf_to_text(pdf_file_path:str):
    """PDF 파일에서 텍스트를 추출하여 TXT 파일로 저장하는 함수"""
    doc = pymupdf.open(pdf_file_path)
    # 머리글/꼬리글 영역을 제외하고 텍스트를 추출합니다.
    header_height = 80
    footer_height = 80
    full_text = ''
    for page in doc:
        rect = page.rect
        text = page.get_text(clip=(0, header_height, rect.width, rect.height-footer_height))
        # 페이지 사이에 구분선을 추가합니다.
        full_text += text + '\n---------------------------------------------------\n'

    # 'output' 디렉토리가 없으면 생성합니다.
    os.makedirs('output', exist_ok=True)
    
    # 저장할 TXT 파일 경로를 설정합니다.
    pdf_file_name = os.path.splitext(os.path.basename(pdf_file_path))[0]
    txt_file_path = f'output/{pdf_file_name}_with_preprocessing.txt'
    
    # 추출한 텍스트를 파일에 씁니다.
    with open(txt_file_path, 'w', encoding='utf-8') as f:
        f.write(full_text)
    return txt_file_path

# (수정) summarize_txt 함수를 Upstage API 용으로 변경
def summarize_txt_upstage(file_path:str):
    """Upstage API를 사용하여 텍스트 파일을 요약하는 함수"""
    
    # Upstage API 클라이언트를 초기화합니다.
    client = OpenAI(
        api_key=api_key,
        base_url="https://api.upstage.ai/v1"
    )
    
    with open(file_path, 'r', encoding='utf-8') as f:
        txt = f.read()

    # Upstage API에 전달할 프롬프트입니다. Gemini 버전과 동일한 포맷을 사용합니다.
    # system 메시지와 user 메시지로 역할을 분리하여 전달합니다.
    response = client.chat.completions.create(
        model="solar-pro2", # Upstage의 모델 사용
        temperature=0.7,
        max_tokens=1024,
        messages=[
            {
                "role": "system",
                "content": "너는 다음 글을 요약하는 봇이다. 글을 읽고 저자의 문제 인식, 주장, 주요 내용을 파악하여 주어진 포맷에 맞춰 요약해라."
            },
            {
                "role": "user",
                "content": f'''
아래 글을 읽고 다음 포맷으로 요약해줘.

# 제목
## 저자의 문제 인식 및 주장 (50문장 이내)
## 저자 소개

==============================이하 텍스트 ============================
{txt}
'''
            }
        ]
    )
    
    return response.choices[0].message.content

def summarize_pdf(pdf_file_path: str, output_file_path:str):
    """PDF 요약 프로세스를 총괄하는 함수"""
    print(f"1. '{pdf_file_path}'에서 텍스트 추출을 시작합니다...")
    txt_file_path = pdf_to_text(pdf_file_path)
    print(f"   -> 텍스트 추출 완료: '{txt_file_path}'")
    
    print(f"2. '{txt_file_path}' 파일의 요약을 시작합니다...")
    # (수정) Upstage 요약 함수를 호출
    summary = summarize_txt_upstage(txt_file_path)
    print("   -> 요약 완료.")

    with open(output_file_path, 'w', encoding='utf-8') as f:
        f.write(summary)
    print(f"3. 최종 요약본이 '{output_file_path}'에 저장되었습니다.")


if __name__ == '__main__':
    pdf_file_path = '대전사회복지사협회-_위기대응_매뉴얼_통합본_개정판.pdf'
    # (수정) 결과 파일명 변경
    output_file_path = 'output/대전사회복지사협회-_위기대응_매뉴얼_통합본_개정판_SUMMARY_UPSTAGE.txt'
    
    summarize_pdf(pdf_file_path, output_file_path)